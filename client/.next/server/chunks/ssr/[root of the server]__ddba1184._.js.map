{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/app/api/auth/%5B...nextauth%5D/auth.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { ISODateString } from \"next-auth\";\r\nimport { JWT } from \"next-auth/jwt\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport NextAuth from \"next-auth\";\r\n\r\n//custom user\r\nexport type CustomUser = {\r\n    userId?: string | null,\r\n    name?: string | null,\r\n    email?: string | null,\r\n    createdAt?: string | null,\r\n    updatedAt?: string | null,\r\n    token?: string | null\r\n\r\n}\r\n\r\n\r\n//custom session\r\nexport type CustomSession = {\r\n    user?: CustomUser,\r\n    expires?: ISODateString\r\n}\r\n\r\n//auth options:- \r\n\r\nexport default NextAuth({\r\n    providers: [\r\n        CredentialsProvider({\r\n            name: \"Credentials\",\r\n            type:\"credentials\",\r\n            credentials: {\r\n                email: { label: \"Email\", type:\"email\", placeholder:\"Enter your email\"},\r\n                password: { label:\"Password\", type:\"password\"}\r\n            },\r\n            async authorize( credentials, req ){\r\n\r\n                // console.log(\"credentials:-----------------\",credentials);\r\n                if (!credentials || !credentials.email || !credentials.password) {\r\n                    // throw new Error(\"Email and password are required\");.\r\n                    return null;\r\n                }\r\n\r\n                try{\r\n                const { data} = await axios.post(\r\n                    `${process.env.BACKEND_API_URL}/user/login`,\r\n                    credentials,\r\n                    { headers:{ \"Content-Type\":\"application/json\"}}\r\n                )\r\n\r\n                return data.data as CustomUser;\r\n            }\r\n            catch(err){\r\n                return null;\r\n            }\r\n                \r\n            }\r\n        })\r\n\r\n    ],\r\n    pages: {\r\n        signIn: \"/login\"\r\n    },\r\n    callbacks: {\r\n        async jwt({ token, user}:{ token:JWT, user:CustomUser}){\r\n              // Persist the OAuth access_token to the token after signin\r\n              console.log(\"2222222222 \",token, \" 4444444444444 \",user);\r\n            if(user){\r\n                token.user = user;\r\n                console.log(\" ]]]]] \",token)\r\n            }\r\n\r\n            return token;\r\n        },\r\n        async session({ user, token, session}:{ user:CustomUser, token: JWT, session: CustomSession}){\r\n            console.log(\"session:-------- \", session,\" == \",token, \" -- \",user);\r\n            session.user = token.user as CustomUser;\r\n            return session;\r\n        }\r\n    },\r\n    secret: process.env.NEXTAUTH_SECRET,\r\n    session:{\r\n        strategy: 'jwt'\r\n    },\r\n    jwt:{\r\n        secret: process.env.NEXTAUTH_SECRET\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;AAAA;AAGA;AACA;;;;uCAsBe,CAAA,GAAA,qIAAA,CAAA,UAAQ,AAAD,EAAE;IACpB,WAAW;QACP,CAAA,GAAA,wJAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,MAAK;YACL,aAAa;gBACT,OAAO;oBAAE,OAAO;oBAAS,MAAK;oBAAS,aAAY;gBAAkB;gBACrE,UAAU;oBAAE,OAAM;oBAAY,MAAK;gBAAU;YACjD;YACA,MAAM,WAAW,WAAW,EAAE,GAAG;gBAE7B,4DAA4D;gBAC5D,IAAI,CAAC,eAAe,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,QAAQ,EAAE;oBAC7D,uDAAuD;oBACvD,OAAO;gBACX;gBAEA,IAAG;oBACH,MAAM,EAAE,IAAI,EAAC,GAAG,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAC5B,GAAG,QAAQ,GAAG,CAAC,eAAe,CAAC,WAAW,CAAC,EAC3C,aACA;wBAAE,SAAQ;4BAAE,gBAAe;wBAAkB;oBAAC;oBAGlD,OAAO,KAAK,IAAI;gBACpB,EACA,OAAM,KAAI;oBACN,OAAO;gBACX;YAEA;QACJ;KAEH;IACD,OAAO;QACH,QAAQ;IACZ;IACA,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAA+B;YAChD,2DAA2D;YAC3D,QAAQ,GAAG,CAAC,eAAc,OAAO,mBAAkB;YACrD,IAAG,MAAK;gBACJ,MAAM,IAAI,GAAG;gBACb,QAAQ,GAAG,CAAC,WAAU;YAC1B;YAEA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAwD;YACxF,QAAQ,GAAG,CAAC,qBAAqB,SAAQ,QAAO,OAAO,QAAO;YAC9D,QAAQ,IAAI,GAAG,MAAM,IAAI;YACzB,OAAO;QACX;IACJ;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAQ;QACJ,UAAU;IACd;IACA,KAAI;QACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACvC;AACJ","debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/app/home/page.tsx"],"sourcesContent":["import React from 'react';\r\nimport { getServerSession } from 'next-auth';\r\nimport authOptions from \"../api/auth/[...nextauth]/auth\";\r\nimport { useSession } from 'next-auth/react';\r\n\r\nconst Home = async () => {\r\n\r\n    const session = await getServerSession(authOptions);\r\n    console.log(\"::--)))))0 \",session);\r\n\r\n  return (\r\n    <div>\r\n        <div>Hello, i am coming home</div>\r\n        {/* <p>{session}</p> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home"],"names":[],"mappings":";;;;AACA;AACA;;;;AAGA,MAAM,OAAO;IAET,MAAM,UAAU,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,uJAAA,CAAA,UAAW;IAClD,QAAQ,GAAG,CAAC,eAAc;IAE5B,qBACE,8OAAC;kBACG,cAAA,8OAAC;sBAAI;;;;;;;;;;;AAIb;uCAEe","debugId":null}}]
}