{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/actions/clash/fetchClash.tsx"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\nexport const fetchClash = async ( clashId:string)=>{\r\n\r\n    \r\n    try{\r\n        const res = await fetch(\r\n            `${process.env.NEXT_PUBLIC_BACKEND_API_URL}/clash/${clashId}`, \r\n            { \r\n                headers:{ \"Content-Type\":\"multipart/form-data\" }\r\n            } );\r\n\r\n        const data = await res.json();\r\n        return data.data;\r\n\r\n      }\r\n      catch(err){\r\n        console.log(err);\r\n      }\r\n\r\n      return null;\r\n\r\n      \r\n}\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;AAKO,MAAM,aAAa,OAAQ;IAG9B,IAAG;QACC,MAAM,MAAM,MAAM,MACd,6DAA2C,OAAO,EAAE,SAAS,EAC7D;YACI,SAAQ;gBAAE,gBAAe;YAAsB;QACnD;QAEJ,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,OAAO,KAAK,IAAI;IAElB,EACA,OAAM,KAAI;QACR,QAAQ,GAAG,CAAC;IACd;IAEA,OAAO;AAGb","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/app/api/auth/%5B...nextauth%5D/auth.ts"],"sourcesContent":["\r\nimport axios from \"axios\";\r\nimport { AuthOptions, ISODateString } from \"next-auth\";\r\nimport { JWT } from \"next-auth/jwt\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\n// import NextAuth from \"next-auth\";\r\n\r\n//custom user\r\n\r\n// Update your CustomUser type to include the id property, which is required by the User type and required for NextAuth.\r\n\r\n\r\nexport type CustomUser = {\r\n    id?: string | null,\r\n    userId?: string | null,\r\n    name?: string | null,\r\n    email?: string | null,\r\n    createdAt?: string | null,\r\n    updatedAt?: string | null,\r\n    token?: string | null\r\n\r\n}\r\n\r\n\r\n//custom session\r\nexport type CustomSession = {\r\n    user?: CustomUser,\r\n    expires: ISODateString\r\n}\r\n\r\n//auth options:- \r\n\r\nexport const authOptions:AuthOptions = {\r\n    providers: [\r\n        CredentialsProvider({\r\n            name: \"Credentials\",\r\n            type:\"credentials\",\r\n            credentials: {\r\n                email: { label: \"Email\", type:\"email\", placeholder:\"Enter your email\"},\r\n                password: { label:\"Password\", type:\"password\"}\r\n            },\r\n            async authorize( credentials ){\r\n\r\n                // console.log(\"credentials:-----------------\",credentials);\r\n                if (!credentials || !credentials.email || !credentials.password) {\r\n                    // throw new Error(\"Email and password are required\");.\r\n                    return null;\r\n                }\r\n\r\n                try{\r\n       \r\n                const { data} = await axios.post(\r\n                    `${process.env.NEXT_PUBLIC_BACKEND_API_URL}/user/login`,\r\n                    credentials,\r\n                    { headers:{ \"Content-Type\":\"application/json\"}}\r\n                )\r\n\r\n                const user = data.data as CustomUser;\r\n                \r\n                // Update your CustomUser type to include the id property, which is required by the User type and required for NextAuth.\r\n                if(user && user.userId){\r\n                    return { ...user, id: user.userId};\r\n                }\r\n                else{\r\n                    return null;\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                return null;\r\n            }\r\n                \r\n            }\r\n        })\r\n\r\n    ],\r\n    pages: {\r\n        signIn: \"/login\"\r\n    },\r\n    callbacks: {\r\n        async jwt({ token, user}:{ token:JWT, user:CustomUser}){\r\n              \r\n            // Persist the OAuth access_token to the token after signin\r\n            //   console.log(\"2222222222 \",token, \" 4444444444444 \",user);\r\n\r\n            if(user){\r\n                token.user = user;\r\n            }\r\n\r\n            return token;\r\n        },\r\n        async session({ token, session}:{ token: JWT, session: CustomSession}){\r\n            session.user = token.user as CustomUser;\r\n            return session;\r\n        }\r\n    },\r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;AACA;AAGA;;;AA4BO,MAAM,cAA0B;IACnC,WAAW;QACP,CAAA,GAAA,wJAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,MAAK;YACL,aAAa;gBACT,OAAO;oBAAE,OAAO;oBAAS,MAAK;oBAAS,aAAY;gBAAkB;gBACrE,UAAU;oBAAE,OAAM;oBAAY,MAAK;gBAAU;YACjD;YACA,MAAM,WAAW,WAAW;gBAExB,4DAA4D;gBAC5D,IAAI,CAAC,eAAe,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,QAAQ,EAAE;oBAC7D,uDAAuD;oBACvD,OAAO;gBACX;gBAEA,IAAG;oBAEH,MAAM,EAAE,IAAI,EAAC,GAAG,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAC5B,6DAA2C,WAAW,CAAC,EACvD,aACA;wBAAE,SAAQ;4BAAE,gBAAe;wBAAkB;oBAAC;oBAGlD,MAAM,OAAO,KAAK,IAAI;oBAEtB,wHAAwH;oBACxH,IAAG,QAAQ,KAAK,MAAM,EAAC;wBACnB,OAAO;4BAAE,GAAG,IAAI;4BAAE,IAAI,KAAK,MAAM;wBAAA;oBACrC,OACI;wBACA,OAAO;oBACX;gBACJ,EACA,OAAM,KAAI;oBACN,QAAQ,GAAG,CAAC;oBACZ,OAAO;gBACX;YAEA;QACJ;KAEH;IACD,OAAO;QACH,QAAQ;IACZ;IACA,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAA+B;YAElD,2DAA2D;YAC3D,8DAA8D;YAE9D,IAAG,MAAK;gBACJ,MAAM,IAAI,GAAG;YACjB;YAEA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,KAAK,EAAE,OAAO,EAAuC;YACjE,QAAQ,IAAI,GAAG,MAAM,IAAI;YACzB,OAAO;QACX;IACJ;AAEJ","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/clashItems/AddClashItems.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AddClashItems = registerClientReference(\n    function() { throw new Error(\"Attempted to call AddClashItems() from the server but AddClashItems is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/clashItems/AddClashItems.tsx <module evaluation>\",\n    \"AddClashItems\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,6EACA","debugId":null}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/clashItems/AddClashItems.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AddClashItems = registerClientReference(\n    function() { throw new Error(\"Attempted to call AddClashItems() from the server but AddClashItems is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/clashItems/AddClashItems.tsx\",\n    \"AddClashItems\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,yDACA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/clash/clash-item-card/ClashItemCard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/clash/clash-item-card/ClashItemCard.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/clash/clash-item-card/ClashItemCard.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0T,GACvV,wFACA","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/clash/clash-item-card/ClashItemCard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/clash/clash-item-card/ClashItemCard.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/clash/clash-item-card/ClashItemCard.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,SAAS,EAAE,SAAS,EAAE,GAAG,OAAyC;IACzE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,ucACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/clashItems/ShowClashItemsWithComment.tsx"],"sourcesContent":["\r\nimport { ClashFetchType } from '@/types/types';\r\nimport ClashItemCard from '../clash/clash-item-card/ClashItemCard';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\nconst ShowClashItemsWithComment = ( { clash}:{ clash:ClashFetchType }) => {\r\n\r\n    \r\n  return (\r\n    <div>\r\n        {/* first box ( voting component)*/}\r\n        {JSON.stringify(clash?.comments)}\r\n        {JSON.stringify(clash?.clashItems[0]?.count)}\r\n        {JSON.stringify(clash?.clashItems[1]?.count)}\r\n        <div className=\"border-2 mt-5\">\r\n\r\n            <div className=\" flex h-[400px] flex-wrap lg:flex-nowrap justify-center items-center overflow-x-auto overflow-y-none\">\r\n\r\n                {/* First Block */}\r\n                <ClashItemCard clash={clash} imageIdx={0}/>\r\n\r\n                {/* VS Block */}\r\n                <div className=\"flex w-full lg:w-auto justify-center items-center mr-10\">\r\n                    <h1 className=\"text-6xl font-extrabold bg-gradient-to-r from-pink-400 to-purple-500 bg-clip-text text-transparent\">\r\n                        VS\r\n                    </h1>\r\n                </div>\r\n\r\n                {/* Second Block */}\r\n                <ClashItemCard clash={clash} imageIdx={1} />\r\n\r\n            </div>\r\n        </div>\r\n\r\n        {/* second box (comment component)*/}\r\n        <div>\r\n            <Textarea></Textarea>\r\n        </div>\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShowClashItemsWithComment;\r\n\r\n"],"names":[],"mappings":";;;;AAEA;AACA;;;;AAEA,MAAM,4BAA4B,CAAE,EAAE,KAAK,EAA0B;IAGnE,qBACE,8OAAC;;YAEI,KAAK,SAAS,CAAC,OAAO;YACtB,KAAK,SAAS,CAAC,OAAO,UAAU,CAAC,EAAE,EAAE;YACrC,KAAK,SAAS,CAAC,OAAO,UAAU,CAAC,EAAE,EAAE;0BACtC,8OAAC;gBAAI,WAAU;0BAEX,cAAA,8OAAC;oBAAI,WAAU;;sCAGX,8OAAC,qKAAA,CAAA,UAAa;4BAAC,OAAO;4BAAO,UAAU;;;;;;sCAGvC,8OAAC;4BAAI,WAAU;sCACX,cAAA,8OAAC;gCAAG,WAAU;0CAAqG;;;;;;;;;;;sCAMvH,8OAAC,qKAAA,CAAA,UAAa;4BAAC,OAAO;4BAAO,UAAU;;;;;;;;;;;;;;;;;0BAM/C,8OAAC;0BACG,cAAA,8OAAC,oIAAA,CAAA,WAAQ;;;;;;;;;;;;;;;;AAKrB;uCAEe","debugId":null}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/app/clash/items/%5Bid%5D/page.tsx"],"sourcesContent":["\"use server\";\r\n\r\nimport { fetchClash } from \"@/actions/clash/fetchClash\";\r\nimport { authOptions, CustomUser } from \"@/app/api/auth/[...nextauth]/auth\";\r\nimport { ClashType } from \"@/app/dashboard/page\";\r\nimport { AddClashItems } from \"@/components/clashItems/AddClashItems\";\r\nimport ShowClashItemsWithComment from \"@/components/clashItems/ShowClashItemsWithComment\";\r\nimport { ClashFetchType } from \"@/types/types\";\r\nimport { getServerSession } from \"next-auth\";\r\n\r\n\r\n\r\nconst page = async ( { params, searchParams}:{ params:{ id:string}, searchParams:Record<string, string|number>}) => {\r\n\r\n  const data = await params;\r\n\r\n  //fetch clash\r\n  const clash:ClashFetchType = await fetchClash(data?.id);\r\n\r\n  const session =  await getServerSession(authOptions);\r\n\r\n  \r\n    return (\r\n      <div>\r\n        <div className=\"p-4\">\r\n          <h1 className=\"text-3xl font-bold text-purple-500\">{clash?.title}</h1>\r\n          <h2 className=\"text-sm text-gray-600 font-semibold text-violet-400\">{clash?.description}</h2>\r\n        </div>\r\n        {\r\n          clash?.clashItems.length > 1 \r\n          ?\r\n          (<ShowClashItemsWithComment clash={clash}/>)\r\n          :\r\n          (<AddClashItems clash={clash} user={session?.user as CustomUser}/>)\r\n\r\n        }\r\n      </div>\r\n  )\r\n}\r\n \r\nexport default page;\r\n\r\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;AAIA,MAAM,OAAO,OAAQ,EAAE,MAAM,EAAE,YAAY,EAAoE;IAE7G,MAAM,OAAO,MAAM;IAEnB,aAAa;IACb,MAAM,QAAuB,MAAM,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAE,MAAM;IAEpD,MAAM,UAAW,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,uJAAA,CAAA,cAAW;IAGjD,qBACE,8OAAC;;0BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAsC,OAAO;;;;;;kCAC3D,8OAAC;wBAAG,WAAU;kCAAuD,OAAO;;;;;;;;;;;;YAG5E,OAAO,WAAW,SAAS,kBAE1B,8OAAC,6JAAA,CAAA,UAAyB;gBAAC,OAAO;;;;;qCAElC,8OAAC,iJAAA,CAAA,gBAAa;gBAAC,OAAO;gBAAO,MAAM,SAAS;;;;;;;;;;;;AAKvD;uCAEe,uCAAE,GAAF;;;IAAA;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}