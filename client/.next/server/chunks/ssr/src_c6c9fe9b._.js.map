{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/actions/authActions.tsx"],"sourcesContent":["\"use server\";\r\n\r\nimport axios, { AxiosError } from \"axios\";\r\n\r\nexport type errorsType = {\r\n    name?: string\r\n    email?: string,\r\n    password?:string \r\n    confirm_password?:string\r\n}\r\n\r\n\r\nexport type initialRespType = {\r\n    success:boolean,\r\n    message: string,\r\n    data?:any,\r\n    errors :{\r\n        name?: string\r\n        email?: string,\r\n        password?:string \r\n        confirm_password?:string\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const registerAction = async ( prev:initialRespType, formData:FormData ):Promise<initialRespType>=>{\r\n\r\n    try{\r\n        const res = await axios.post(\r\n            `${process.env.BACKEND_API_URL}/user/register`, \r\n            { name: formData.get(\"username\"), email: formData.get(\"email\"), password: formData.get(\"password\"), confirm_password: formData.get(\"confirm-password\") }, \r\n            { headers:{ \"Content-Type\":\"application/json\"}}\r\n        );\r\n\r\n        return{\r\n            success:true,\r\n            message:\"Account Created Successfully, Please check your email and verify your email\",\r\n            errors:{}\r\n        }\r\n       \r\n    }\r\n    catch(err:any){\r\n \r\n       if( err instanceof AxiosError){\r\n          if(err?.status===422){\r\n\r\n            const errorsObj:errorsType = {};\r\n\r\n            err?.response?.data?.errors?.forEach((error:errorsType)=>{\r\n\r\n                if( error[\"name\"]!==undefined){\r\n                    errorsObj.name = error[\"name\"];\r\n                }\r\n                else if( error[\"email\"]!==undefined){\r\n                    errorsObj.email = error[\"email\"];\r\n                }\r\n                else if( error[\"password\"]!==undefined){\r\n                    errorsObj.password = error[\"password\"];\r\n                }\r\n                else if( error[\"confirm_password\"]!==undefined){\r\n                    errorsObj.confirm_password = error[\"confirm_password\"];\r\n                }\r\n\r\n            })\r\n\r\n            return { \r\n                success:false,\r\n                message:\"validation Error\",\r\n                errors: errorsObj\r\n            }\r\n          }\r\n       }\r\n\r\n       return{ \r\n        success:false,\r\n        message:\"Something went wrong\", \r\n        errors:{}\r\n        }\r\n    }\r\n\r\n\r\n} \r\n\r\n\r\nexport const loginAction = async ( prev:initialRespType, formData:FormData ):Promise<initialRespType>=>{\r\n\r\n    try{\r\n        const res = await axios.post(\r\n            `${process.env.BACKEND_API_URL}/user/login-check`, \r\n            { email: formData.get(\"email\"), password: formData.get(\"password\") }, \r\n            { headers:{ \"Content-Type\":\"application/json\"}}\r\n        );\r\n\r\n        console.log(res);\r\n\r\n        return{\r\n            success:true,\r\n            message:\"Login Validation Succcess\",\r\n            errors:{},\r\n            data: {\r\n                email: formData.get(\"email\"),\r\n                password: formData.get(\"password\")\r\n            }\r\n        }\r\n       \r\n    }\r\n    catch(err:any){\r\n \r\n       if( err instanceof AxiosError){\r\n          if(err?.status===422){  \r\n\r\n            const errorsObj:errorsType = {};\r\n\r\n            err?.response?.data?.errors?.forEach((error:errorsType)=>{\r\n\r\n                if( error[\"email\"]!==undefined){\r\n                    errorsObj.email = error[\"email\"];\r\n                }\r\n                if( error[\"password\"]!==undefined){\r\n                    errorsObj.password = error[\"password\"];\r\n                }\r\n\r\n            })\r\n\r\n            return { \r\n                success:false,\r\n                message:\"validation Error\",\r\n                errors: errorsObj\r\n            }\r\n          }\r\n       }\r\n\r\n       if( err instanceof AxiosError){\r\n        if(err?.status===401){\r\n\r\n            return{ \r\n                success:true,\r\n                message:\"Invalid Email or Password\",\r\n                errors:{}\r\n            }\r\n          }\r\n        }\r\n     }\r\n\r\n       return{ \r\n        success:false,\r\n        message:\"Something went wrong\", \r\n        errors:{}\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;IA0Ba;IA2DA","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/loading/FormButtonLoading.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React from 'react';\r\nimport { useFormStatus} from \"react-dom\";\r\nimport \"./FormButtonLoading.css\";\r\n\r\nconst FormButtonLoading = ( { BtnName, ButtonBgColor}:{ BtnName:string, ButtonBgColor:string}) => {\r\n\r\n  const status = useFormStatus();\r\n\r\n  return (\r\n    <div>\r\n        <button \r\n            type=\"submit\" \r\n            className={`w-full ${ButtonBgColor} text-white ${ status.pending ? \"p-1\" : \"p-2\"} rounded hover:opacity-80 transition duration-200 mb-2`}\r\n            >\r\n                { status.pending===true\r\n                  ? \r\n                   (\r\n                    <div className='flex items-center justify-center transition duration-200 '>\r\n                      <div className=\"loader \">\r\n                          <div className=\"bar1\"></div>\r\n                          <div className=\"bar2\"></div>\r\n                          <div className=\"bar3\"></div>\r\n                          <div className=\"bar4\"></div>\r\n                          <div className=\"bar5\"></div>\r\n                          <div className=\"bar6\"></div>\r\n                          <div className=\"bar7\"></div>\r\n                          <div className=\"bar8\"></div>\r\n                          <div className=\"bar9\"></div>\r\n                          <div className=\"bar10\"></div>\r\n                          <div className=\"bar11\"></div>\r\n                          <div className=\"bar12\"></div>\r\n                      </div>\r\n                    </div>\r\n                   ) \r\n                  : \r\n                  BtnName\r\n                }\r\n            </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormButtonLoading"],"names":[],"mappings":";;;;AAGA;AAHA;;;;AAMA,MAAM,oBAAoB,CAAE,EAAE,OAAO,EAAE,aAAa,EAAyC;IAE3F,MAAM,SAAS,CAAA,GAAA,4MAAA,CAAA,gBAAa,AAAD;IAE3B,qBACE,8OAAC;kBACG,cAAA,8OAAC;YACG,MAAK;YACL,WAAW,CAAC,OAAO,EAAE,cAAc,YAAY,EAAG,OAAO,OAAO,GAAG,QAAQ,MAAM,sDAAsD,CAAC;sBAElI,OAAO,OAAO,KAAG,qBAGf,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;;;;;;;;;;;uBAKvB;;;;;;;;;;;AAKlB;uCAEe","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/register/RegisterForm.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { initialRespType, registerAction } from '@/actions/authActions';\r\nimport Link from 'next/link';\r\nimport React, { useActionState, useEffect, useState } from 'react'\r\nimport FormButtonLoading from '../loading/FormButtonLoading';\r\n\r\nfunction RegisterForm(){\r\n\r\n    const initialState:initialRespType = {\r\n        success:false,\r\n        message:\"\",\r\n        errors:{}\r\n    }\r\n\r\n    const [ state, formAction]  = useActionState( registerAction, initialState);\r\n  \r\n\r\n    const [ onTypeRemoveErrorReRender, setOnTypeRemoveErrorReRender] = useState(false);\r\n    \r\n    const onTypeRemoveError = (errorType: \"name\" | \"email\" | \"password\" | \"confirm_password\")=>{\r\n\r\n      if( state?.errors && state?.errors[errorType]!==undefined && state.errors[errorType]!==\"\"){ \r\n        state.errors[errorType] = \"\" ; \r\n        setOnTypeRemoveErrorReRender(!onTypeRemoveErrorReRender);\r\n      }\r\n\r\n\r\n    }\r\n\r\n\r\n    //render when user type on input which have validation type error message on action of onTypeRemoveError()\r\n    useEffect(()=>{\r\n\r\n    },[onTypeRemoveErrorReRender]);\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n        <form\r\n          noValidate\r\n          className=\"bg-white p-8 rounded shadow-md w-96\"\r\n          action={formAction}\r\n        >\r\n\r\n          <h1 className=\"text-2xl text-pink-500 font-bold text-center mb-6\">Register</h1>\r\n          \r\n          <div className=\"mb-4\">\r\n            <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700\">Username</label>\r\n            <input onChange={()=>{onTypeRemoveError(\"name\")}} type=\"text\" name='username' id=\"username\" className=\"mt-1 block w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-blue-500\" required />\r\n            { state?.errors && state?.errors?.name?.trim()!==undefined && state?.errors?.name?.trim()!==\"\" && <div className='text-red-400 text-sm tracking-wide pl-1'>{state?.errors?.name}</div>}\r\n          </div>\r\n\r\n          <div className=\"mb-4\">\r\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n            <input onChange={()=>{onTypeRemoveError(\"email\")}} type=\"email\" name='email' id=\"email\" className=\"mt-1 block w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-blue-500\" required />\r\n            { state?.errors && state?.errors?.email && <div className='text-red-400 text-sm tracking-wide pl-1'>{state?.errors?.email}</div>}\r\n          </div>\r\n\r\n          <div className=\"mb-4\">\r\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">Password</label>\r\n            <input onChange={()=>{onTypeRemoveError(\"password\")}} type=\"password\" name=\"password\" id=\"password\" className=\"mt-1 block w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-blue-500\" required />\r\n            { state?.errors && state?.errors?.password && <div className='text-red-400 text-sm tracking-wide pl-1'>{state?.errors?.password}</div>}\r\n          </div>\r\n\r\n          <div className=\"mb-4\">\r\n            <label htmlFor=\"confirm-password\" className=\"block text-sm font-medium text-gray-700\">Confirm Password</label>\r\n            <input onChange={()=>{onTypeRemoveError(\"confirm_password\")}} type=\"password\" name=\"confirm-password\" id=\"confirm-password\" className=\"mt-1 block w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-blue-500\" required />\r\n            { state?.errors && state?.errors?.confirm_password && <div className='text-red-400 text-sm tracking-wide pl-1'>{state?.errors?.confirm_password}</div>}\r\n          </div>\r\n\r\n          <FormButtonLoading BtnName='Create Account' ButtonBgColor='bg-pink-500' />\r\n          \r\n          <p className=\"mt-4 text-center\">\r\n            Already Have an account? <Link href=\"/login\" className=\"text-blue-500 hover:underline\">Login</Link>\r\n          </p>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport { RegisterForm};"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAOA,SAAS;IAEL,MAAM,eAA+B;QACjC,SAAQ;QACR,SAAQ;QACR,QAAO,CAAC;IACZ;IAEA,MAAM,CAAE,OAAO,WAAW,GAAI,CAAA,GAAA,qMAAA,CAAA,iBAAc,AAAD,EAAG,8HAAA,CAAA,iBAAc,EAAE;IAG9D,MAAM,CAAE,2BAA2B,6BAA6B,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE5E,MAAM,oBAAoB,CAAC;QAEzB,IAAI,OAAO,UAAU,OAAO,MAAM,CAAC,UAAU,KAAG,aAAa,MAAM,MAAM,CAAC,UAAU,KAAG,IAAG;YACxF,MAAM,MAAM,CAAC,UAAU,GAAG;YAC1B,6BAA6B,CAAC;QAChC;IAGF;IAGA,0GAA0G;IAC1G,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE,KAEV,GAAE;QAAC;KAA0B;IAI7B,qBACI,8OAAC;kBACD,cAAA,8OAAC;YACC,UAAU;YACV,WAAU;YACV,QAAQ;;8BAGR,8OAAC;oBAAG,WAAU;8BAAoD;;;;;;8BAElE,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAM,SAAQ;4BAAW,WAAU;sCAA0C;;;;;;sCAC9E,8OAAC;4BAAM,UAAU;gCAAK,kBAAkB;4BAAO;4BAAG,MAAK;4BAAO,MAAK;4BAAW,IAAG;4BAAW,WAAU;4BAAyG,QAAQ;;;;;;wBACrN,OAAO,UAAU,OAAO,QAAQ,MAAM,WAAS,aAAa,OAAO,QAAQ,MAAM,WAAS,oBAAM,8OAAC;4BAAI,WAAU;sCAA2C,OAAO,QAAQ;;;;;;;;;;;;8BAG7K,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAM,SAAQ;4BAAQ,WAAU;sCAA0C;;;;;;sCAC3E,8OAAC;4BAAM,UAAU;gCAAK,kBAAkB;4BAAQ;4BAAG,MAAK;4BAAQ,MAAK;4BAAQ,IAAG;4BAAQ,WAAU;4BAAyG,QAAQ;;;;;;wBACjN,OAAO,UAAU,OAAO,QAAQ,uBAAS,8OAAC;4BAAI,WAAU;sCAA2C,OAAO,QAAQ;;;;;;;;;;;;8BAGtH,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAM,SAAQ;4BAAW,WAAU;sCAA0C;;;;;;sCAC9E,8OAAC;4BAAM,UAAU;gCAAK,kBAAkB;4BAAW;4BAAG,MAAK;4BAAW,MAAK;4BAAW,IAAG;4BAAW,WAAU;4BAAyG,QAAQ;;;;;;wBAC7N,OAAO,UAAU,OAAO,QAAQ,0BAAY,8OAAC;4BAAI,WAAU;sCAA2C,OAAO,QAAQ;;;;;;;;;;;;8BAGzH,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAM,SAAQ;4BAAmB,WAAU;sCAA0C;;;;;;sCACtF,8OAAC;4BAAM,UAAU;gCAAK,kBAAkB;4BAAmB;4BAAG,MAAK;4BAAW,MAAK;4BAAmB,IAAG;4BAAmB,WAAU;4BAAyG,QAAQ;;;;;;wBACrP,OAAO,UAAU,OAAO,QAAQ,kCAAoB,8OAAC;4BAAI,WAAU;sCAA2C,OAAO,QAAQ;;;;;;;;;;;;8BAGjI,8OAAC,kJAAA,CAAA,UAAiB;oBAAC,SAAQ;oBAAiB,eAAc;;;;;;8BAE1D,8OAAC;oBAAE,WAAU;;wBAAmB;sCACL,8OAAC,4JAAA,CAAA,UAAI;4BAAC,MAAK;4BAAS,WAAU;sCAAgC;;;;;;;;;;;;;;;;;;;;;;;AAKnG","debugId":null}}]
}