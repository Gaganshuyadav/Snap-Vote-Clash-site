{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/actions/authActions.tsx"],"sourcesContent":["\"use server\";\r\n\r\nimport axios, { AxiosError } from \"axios\";\r\n\r\nexport type errorsType = {\r\n    name?: string\r\n    email?: string,\r\n    password?:string \r\n    confirm_password?:string\r\n}\r\n\r\n\r\nexport type initialRespType = {\r\n    success:boolean,\r\n    message: string,\r\n    data?:any,\r\n    errors :{\r\n        name?: string\r\n        email?: string,\r\n        password?:string \r\n        confirm_password?:string\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const registerAction = async ( prev:initialRespType, formData:FormData ):Promise<initialRespType>=>{\r\n\r\n    try{\r\n        const res = await axios.post(\r\n            `${process.env.BACKEND_API_URL}/user/register`, \r\n            { name: formData.get(\"username\"), email: formData.get(\"email\"), password: formData.get(\"password\"), confirm_password: formData.get(\"confirm-password\") }, \r\n            { headers:{ \"Content-Type\":\"application/json\"}}\r\n        );\r\n\r\n        return{\r\n            success:true,\r\n            message:\"Account Created Successfully, Please check your email and verify your email\",\r\n            errors:{}\r\n        }\r\n       \r\n    }\r\n    catch(err:any){\r\n \r\n       if( err instanceof AxiosError){\r\n          if(err?.status===422){\r\n\r\n            const errorsObj:errorsType = {};\r\n\r\n            err?.response?.data?.errors?.forEach((error:errorsType)=>{\r\n\r\n                if( error[\"name\"]!==undefined){\r\n                    errorsObj.name = error[\"name\"];\r\n                }\r\n                else if( error[\"email\"]!==undefined){\r\n                    errorsObj.email = error[\"email\"];\r\n                }\r\n                else if( error[\"password\"]!==undefined){\r\n                    errorsObj.password = error[\"password\"];\r\n                }\r\n                else if( error[\"confirm_password\"]!==undefined){\r\n                    errorsObj.confirm_password = error[\"confirm_password\"];\r\n                }\r\n\r\n            })\r\n\r\n            return { \r\n                success:false,\r\n                message:\"validation Error\",\r\n                errors: errorsObj\r\n            }\r\n          }\r\n       }\r\n\r\n       return{ \r\n        success:false,\r\n        message:\"Something went wrong\", \r\n        errors:{}\r\n        }\r\n    }\r\n\r\n\r\n} \r\n\r\n\r\nexport const loginAction = async ( prev:initialRespType, formData:FormData ):Promise<initialRespType>=>{\r\n\r\n    try{\r\n        const res = await axios.post(\r\n            `${process.env.NEXT_PUBLIC_BACKEND_API_URL}/user/login-check`, \r\n            { email: formData.get(\"email\"), password: formData.get(\"password\") }, \r\n            { headers:{ \"Content-Type\":\"application/json\"}}\r\n        );\r\n\r\n        return{\r\n            success:true,\r\n            message:\"Login Validation Succcess\",\r\n            errors:{},\r\n            data: {\r\n                email: formData.get(\"email\"),\r\n                password: formData.get(\"password\")\r\n            }\r\n        }\r\n       \r\n    }\r\n    catch(err:any){\r\n \r\n       if( err instanceof AxiosError){\r\n          if(err?.status===422){  \r\n\r\n            const errorsObj:errorsType = {};\r\n\r\n            err?.response?.data?.errors?.forEach((error:errorsType)=>{\r\n\r\n                if( error[\"email\"]!==undefined){\r\n                    errorsObj.email = error[\"email\"];\r\n                }\r\n                if( error[\"password\"]!==undefined){\r\n                    errorsObj.password = error[\"password\"];\r\n                }\r\n\r\n            })\r\n\r\n            return { \r\n                success:false,\r\n                message:\"validation Error\",\r\n                errors: errorsObj\r\n            }\r\n          }\r\n       }\r\n\r\n       if( err instanceof AxiosError){\r\n        if(err?.status===401){\r\n\r\n            return{ \r\n                success:true,\r\n                message:\"Invalid Email or Password\",\r\n                errors:{}\r\n            }\r\n          }\r\n        }\r\n     }\r\n\r\n       return{ \r\n        success:false,\r\n        message:\"Something went wrong\", \r\n        errors:{}\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;IA0Ba;IA2DA","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/loading/FormButtonLoading.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React from 'react';\r\nimport { useFormStatus} from \"react-dom\";\r\nimport \"./FormButtonLoading.css\";\r\n\r\nconst FormButtonLoading = ( { BtnName, ButtonBgColor}:{ BtnName:string, ButtonBgColor:string}) => {\r\n\r\n  const status = useFormStatus();\r\n\r\n  return (\r\n    <div>\r\n        <button \r\n            type=\"submit\" \r\n            className={`w-full ${ButtonBgColor} text-white ${ status.pending ? \"p-1\" : \"p-2\"} rounded hover:opacity-80 transition duration-200 mb-2`}\r\n            >\r\n                { status.pending===true\r\n                  ? \r\n                   (\r\n                    <div className='flex items-center justify-center transition duration-200 '>\r\n                      <div className=\"loader \">\r\n                          <div className=\"bar1\"></div>\r\n                          <div className=\"bar2\"></div>\r\n                          <div className=\"bar3\"></div>\r\n                          <div className=\"bar4\"></div>\r\n                          <div className=\"bar5\"></div>\r\n                          <div className=\"bar6\"></div>\r\n                          <div className=\"bar7\"></div>\r\n                          <div className=\"bar8\"></div>\r\n                          <div className=\"bar9\"></div>\r\n                          <div className=\"bar10\"></div>\r\n                          <div className=\"bar11\"></div>\r\n                          <div className=\"bar12\"></div>\r\n                      </div>\r\n                    </div>\r\n                   ) \r\n                  : \r\n                  BtnName\r\n                }\r\n            </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormButtonLoading"],"names":[],"mappings":";;;;AAGA;AAHA;;;;AAMA,MAAM,oBAAoB,CAAE,EAAE,OAAO,EAAE,aAAa,EAAyC;IAE3F,MAAM,SAAS,CAAA,GAAA,4MAAA,CAAA,gBAAa,AAAD;IAE3B,qBACE,8OAAC;kBACG,cAAA,8OAAC;YACG,MAAK;YACL,WAAW,CAAC,OAAO,EAAE,cAAc,YAAY,EAAG,OAAO,OAAO,GAAG,QAAQ,MAAM,sDAAsD,CAAC;sBAElI,OAAO,OAAO,KAAG,qBAGf,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;;;;;;;;;;;uBAKvB;;;;;;;;;;;AAKlB;uCAEe","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/app/api/auth/%5B...nextauth%5D/auth.ts"],"sourcesContent":["\r\nimport axios from \"axios\";\r\nimport { ISODateString } from \"next-auth\";\r\nimport { JWT } from \"next-auth/jwt\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport NextAuth from \"next-auth\";\r\n\r\n//custom user\r\nexport type CustomUser = {\r\n    userId?: string | null,\r\n    name?: string | null,\r\n    email?: string | null,\r\n    createdAt?: string | null,\r\n    updatedAt?: string | null,\r\n    token?: string | null\r\n\r\n}\r\n\r\n\r\n//custom session\r\nexport type CustomSession = {\r\n    user?: CustomUser,\r\n    expires?: ISODateString\r\n}\r\n\r\n//auth options:- \r\n\r\nexport default NextAuth({\r\n    providers: [\r\n        CredentialsProvider({\r\n            name: \"Credentials\",\r\n            type:\"credentials\",\r\n            credentials: {\r\n                email: { label: \"Email\", type:\"email\", placeholder:\"Enter your email\"},\r\n                password: { label:\"Password\", type:\"password\"}\r\n            },\r\n            async authorize( credentials, req ){\r\n\r\n                // console.log(\"credentials:-----------------\",credentials);\r\n                if (!credentials || !credentials.email || !credentials.password) {\r\n                    // throw new Error(\"Email and password are required\");.\r\n                    return null;\r\n                }\r\n\r\n                try{\r\n       \r\n                const { data} = await axios.post(\r\n                    `${process.env.NEXT_PUBLIC_BACKEND_API_URL}/user/login`,\r\n                    credentials,\r\n                    { headers:{ \"Content-Type\":\"application/json\"}}\r\n                )\r\n\r\n                const user = data.data as CustomUser;\r\n                if(user){\r\n                    return user;\r\n                }\r\n                else{\r\n                    return null;\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                return null;\r\n            }\r\n                \r\n            }\r\n        })\r\n\r\n    ],\r\n    pages: {\r\n        signIn: \"/login\"\r\n    },\r\n    callbacks: {\r\n        async jwt({ token, user}:{ token:JWT, user:CustomUser}){\r\n              \r\n            // Persist the OAuth access_token to the token after signin\r\n            //   console.log(\"2222222222 \",token, \" 4444444444444 \",user);\r\n\r\n            if(user){\r\n                token.user = user;\r\n            }\r\n\r\n            return token;\r\n        },\r\n        async session({ user, token, session}:{ user:CustomUser, token: JWT, session: CustomSession}){\r\n            session.user = token.user as CustomUser;\r\n            return session;\r\n        }\r\n    },\r\n    \r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;AACA;AAGA;AACA;;;;uCAsBe,CAAA,GAAA,qIAAA,CAAA,UAAQ,AAAD,EAAE;IACpB,WAAW;QACP,CAAA,GAAA,wJAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,MAAK;YACL,aAAa;gBACT,OAAO;oBAAE,OAAO;oBAAS,MAAK;oBAAS,aAAY;gBAAkB;gBACrE,UAAU;oBAAE,OAAM;oBAAY,MAAK;gBAAU;YACjD;YACA,MAAM,WAAW,WAAW,EAAE,GAAG;gBAE7B,4DAA4D;gBAC5D,IAAI,CAAC,eAAe,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,QAAQ,EAAE;oBAC7D,uDAAuD;oBACvD,OAAO;gBACX;gBAEA,IAAG;oBAEH,MAAM,EAAE,IAAI,EAAC,GAAG,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAC5B,6DAA2C,WAAW,CAAC,EACvD,aACA;wBAAE,SAAQ;4BAAE,gBAAe;wBAAkB;oBAAC;oBAGlD,MAAM,OAAO,KAAK,IAAI;oBACtB,IAAG,MAAK;wBACJ,OAAO;oBACX,OACI;wBACA,OAAO;oBACX;gBACJ,EACA,OAAM,KAAI;oBACN,QAAQ,GAAG,CAAC;oBACZ,OAAO;gBACX;YAEA;QACJ;KAEH;IACD,OAAO;QACH,QAAQ;IACZ;IACA,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAA+B;YAElD,2DAA2D;YAC3D,8DAA8D;YAE9D,IAAG,MAAK;gBACJ,MAAM,IAAI,GAAG;YACjB;YAEA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAwD;YACxF,QAAQ,IAAI,GAAG,MAAM,IAAI;YACzB,OAAO;QACX;IACJ;AAEJ","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/login/LoginForm.tsx"],"sourcesContent":["\"use client\";\r\nimport { initialRespType, loginAction } from \"@/actions/authActions\";\r\nimport Link from \"next/link\";\r\nimport { useActionState, useEffect, useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\nimport FormButtonLoading from \"../loading/FormButtonLoading\";\r\nimport { signIn, useSession} from \"next-auth/react\";\r\nimport authOptions from \"../../app/api/auth/[...nextauth]/auth\"\r\nimport { redirect } from \"next/navigation\";\r\n// import { useRouter, useSearchParams, useParams } from 'next/navigation';\r\n\r\nexport default function LoginForm() {\r\n\r\n    const initialState:initialRespType = {\r\n            success:false,\r\n            message:\"\",\r\n            errors:{}\r\n    }\r\n\r\n    const [ state, formAction] = useActionState( loginAction, initialState);\r\n\r\n\r\n    const [ onTypeRemoveErrorReRender, setOnTypeRemoveErrorReRender] = useState(false);\r\n    \r\n        const onTypeRemoveError = (errorType: \"email\" | \"password\" )=>{\r\n\r\n        if( state?.errors && state?.errors[errorType]!==undefined && state.errors[errorType]!==\"\"){ \r\n            state.errors[errorType] = \"\" ; \r\n            setOnTypeRemoveErrorReRender(!onTypeRemoveErrorReRender);\r\n        }\r\n    \r\n    \r\n    }\r\n    \r\n    \r\n    //render when user type on input which have validation type error message on action of onTypeRemoveError()\r\n    useEffect(()=>{\r\n    \r\n    },[onTypeRemoveErrorReRender]);\r\n\r\n\r\n\r\n    //for login message\r\n    useEffect(()=>{\r\n\r\n        if( state.message===\"Login Validation Succcess\"){\r\n            signIn(\"credentials\", {\r\n                email: state.data?.email,\r\n                password: state.data?.password,\r\n                redirect: true,\r\n                callbackUrl: \"/dashboard\"\r\n            });\r\n            toast(\"Login Successfully\");\r\n        }\r\n\r\n        if( state.message===\"Invalid Email or Password\"){\r\n            toast(\"Invalid Email or Password\");\r\n        }\r\n\r\n    },[state]);\r\n\r\n\r\n    // const a1 = useParams();\r\n    // const a2 = useSearchParams();\r\n    // const a3 = useRouter();\r\n    // console.log(a1);\r\n    // console.log(a2.get(\"as\"));\r\n    // console.log(a3);\r\n\r\n\r\n\r\n    //check if login already\r\n    const session = useSession(authOptions);\r\n\r\n    if(session?.status===\"authenticated\"){\r\n       redirect(\"/dashboard\");\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <form \r\n                noValidate\r\n                className=\"bg-white p-8 rounded shadow-md w-96\"\r\n                action={formAction}\r\n            >\r\n\r\n                <h1 className=\"text-2xl font-bold text-pink-500 text-center mb-6\">Login</h1>\r\n                <div className=\"mb-4\">\r\n                    <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n                    <input onChange={()=>{onTypeRemoveError(\"email\")}} type=\"email\" name='email' id=\"email\" className=\"mt-1 block w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-blue-500\" />\r\n                    { state?.errors && state?.errors?.email && <div className='text-red-400 text-sm tracking-wide pl-1'>{state?.errors?.email}</div>}\r\n                </div>\r\n\r\n                <div className=\"mb-1\">\r\n                    <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">Password</label>\r\n                    <input onChange={()=>{onTypeRemoveError(\"password\")}} type=\"password\" name='password' id=\"password\" className=\"mt-1 block w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-blue-500\" />\r\n                    { state?.errors && state?.errors?.password && <div className='text-red-400 text-sm tracking-wide pl-1'>{state?.errors?.password}</div>}\r\n                </div>\r\n\r\n                <p className=\"mt-0 ml-1 mb-4\">\r\n                    <Link href=\"/register\" className=\"text-gray-500 underline hover:text-pink-500  text-sm\">Forgot Password</Link>\r\n                </p>\r\n\r\n                <FormButtonLoading BtnName=\"Login\" ButtonBgColor=\"bg-pink-500\" />\r\n\r\n                <p className=\"mt-4 text-center\">\r\n                    Don't have an account? <Link href=\"/register\" className=\"text-blue-500 hover:underline\">Register</Link>\r\n                </p>\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;;AAWe,SAAS;IAEpB,MAAM,eAA+B;QAC7B,SAAQ;QACR,SAAQ;QACR,QAAO,CAAC;IAChB;IAEA,MAAM,CAAE,OAAO,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,iBAAc,AAAD,EAAG,8HAAA,CAAA,cAAW,EAAE;IAG1D,MAAM,CAAE,2BAA2B,6BAA6B,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAExE,MAAM,oBAAoB,CAAC;QAE3B,IAAI,OAAO,UAAU,OAAO,MAAM,CAAC,UAAU,KAAG,aAAa,MAAM,MAAM,CAAC,UAAU,KAAG,IAAG;YACtF,MAAM,MAAM,CAAC,UAAU,GAAG;YAC1B,6BAA6B,CAAC;QAClC;IAGJ;IAGA,0GAA0G;IAC1G,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE,KAEV,GAAE;QAAC;KAA0B;IAI7B,mBAAmB;IACnB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QAEN,IAAI,MAAM,OAAO,KAAG,6BAA4B;YAC5C,CAAA,GAAA,8IAAA,CAAA,SAAM,AAAD,EAAE,eAAe;gBAClB,OAAO,MAAM,IAAI,EAAE;gBACnB,UAAU,MAAM,IAAI,EAAE;gBACtB,UAAU;gBACV,aAAa;YACjB;YACA,CAAA,GAAA,wIAAA,CAAA,QAAK,AAAD,EAAE;QACV;QAEA,IAAI,MAAM,OAAO,KAAG,6BAA4B;YAC5C,CAAA,GAAA,wIAAA,CAAA,QAAK,AAAD,EAAE;QACV;IAEJ,GAAE;QAAC;KAAM;IAGT,0BAA0B;IAC1B,gCAAgC;IAChC,0BAA0B;IAC1B,mBAAmB;IACnB,6BAA6B;IAC7B,mBAAmB;IAInB,wBAAwB;IACxB,MAAM,UAAU,CAAA,GAAA,8IAAA,CAAA,aAAU,AAAD,EAAE,uJAAA,CAAA,UAAW;IAEtC,IAAG,SAAS,WAAS,iBAAgB;QAClC,CAAA,GAAA,kIAAA,CAAA,WAAQ,AAAD,EAAE;IACZ;IAGA,qBACI;kBACI,cAAA,8OAAC;YACG,UAAU;YACV,WAAU;YACV,QAAQ;;8BAGR,8OAAC;oBAAG,WAAU;8BAAoD;;;;;;8BAClE,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAM,SAAQ;4BAAQ,WAAU;sCAA0C;;;;;;sCAC3E,8OAAC;4BAAM,UAAU;gCAAK,kBAAkB;4BAAQ;4BAAG,MAAK;4BAAQ,MAAK;4BAAQ,IAAG;4BAAQ,WAAU;;;;;;wBAChG,OAAO,UAAU,OAAO,QAAQ,uBAAS,8OAAC;4BAAI,WAAU;sCAA2C,OAAO,QAAQ;;;;;;;;;;;;8BAGxH,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAM,SAAQ;4BAAW,WAAU;sCAA0C;;;;;;sCAC9E,8OAAC;4BAAM,UAAU;gCAAK,kBAAkB;4BAAW;4BAAG,MAAK;4BAAW,MAAK;4BAAW,IAAG;4BAAW,WAAU;;;;;;wBAC5G,OAAO,UAAU,OAAO,QAAQ,0BAAY,8OAAC;4BAAI,WAAU;sCAA2C,OAAO,QAAQ;;;;;;;;;;;;8BAG3H,8OAAC;oBAAE,WAAU;8BACT,cAAA,8OAAC,4JAAA,CAAA,UAAI;wBAAC,MAAK;wBAAY,WAAU;kCAAuD;;;;;;;;;;;8BAG5F,8OAAC,kJAAA,CAAA,UAAiB;oBAAC,SAAQ;oBAAQ,eAAc;;;;;;8BAEjD,8OAAC;oBAAE,WAAU;;wBAAmB;sCACL,8OAAC,4JAAA,CAAA,UAAI;4BAAC,MAAK;4BAAY,WAAU;sCAAgC;;;;;;;;;;;;;;;;;;;AAM5G","debugId":null}}]
}