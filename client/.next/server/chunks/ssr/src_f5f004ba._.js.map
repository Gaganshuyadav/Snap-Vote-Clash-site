{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/actions/authActions.tsx"],"sourcesContent":["\"use server\";\r\n\r\nimport axios, { AxiosError } from \"axios\";\r\nimport { resolve } from \"path\";\r\n\r\nexport type errorsType = {\r\n    name?: string\r\n    email?: string,\r\n    password?:string \r\n    confirm_password?:string\r\n}\r\n\r\n\r\nexport type initialRespType = {\r\n    success:boolean,\r\n    message: string,\r\n    errors :{\r\n        name?: string\r\n        email?: string,\r\n        password?:string \r\n        confirm_password?:string\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const registerAction = async ( prev:initialRespType, formData:FormData ):Promise<initialRespType>=>{\r\n\r\n    try{\r\n        const res = await axios.post(\r\n            `${process.env.BACKEND_API_URL}/user/register`, \r\n            { name: formData.get(\"username\"), email: formData.get(\"email\"), password: formData.get(\"password\"), confirm_password: formData.get(\"confirm-password\") }, \r\n            { headers:{ \"Content-Type\":\"application/json\"}}\r\n        );\r\n\r\n        return{\r\n            success:true,\r\n            message:\"Account Created Successfully, Please check your email and verify your email\",\r\n            errors:{}\r\n        }\r\n       \r\n    }\r\n    catch(err:any){\r\n \r\n       if( err instanceof AxiosError){\r\n          if(err?.status===422){\r\n\r\n            const errorsObj:errorsType = {};\r\n\r\n            err?.response?.data?.errors?.forEach((error:errorsType)=>{\r\n\r\n                if( error[\"name\"]!==undefined){\r\n                    errorsObj.name = error[\"name\"];\r\n                }\r\n                else if( error[\"email\"]!==undefined){\r\n                    errorsObj.email = error[\"email\"];\r\n                }\r\n                else if( error[\"password\"]!==undefined){\r\n                    errorsObj.password = error[\"password\"];\r\n                }\r\n                else if( error[\"confirm_password\"]!==undefined){\r\n                    errorsObj.confirm_password = error[\"confirm_password\"];\r\n                }\r\n\r\n            })\r\n\r\n            return { \r\n                success:false,\r\n                message:\"validation Error\",\r\n                errors: errorsObj\r\n            }\r\n          }\r\n       }\r\n\r\n       return{ \r\n        success:false,\r\n        message:\"Something went wrong\", \r\n        errors:{}\r\n        }\r\n    }\r\n\r\n\r\n} \r\n\r\n\r\nexport const loginAction = async ( prev:initialRespType, formData:FormData )=>{\r\n\r\n    try{\r\n        const res = await axios.post(\r\n            `${process.env.BACKEND_API_URL}/user/login-check`, \r\n            { email: formData.get(\"email\"), password: formData.get(\"password\") }, \r\n            { headers:{ \"Content-Type\":\"application/json\"}}\r\n        );\r\n\r\n        console.log(res);\r\n\r\n        return{\r\n            success:true,\r\n            message:\"Login Validation Succcess\",\r\n            errors:{}\r\n        }\r\n       \r\n    }\r\n    catch(err:any){\r\n        console.log(err);\r\n \r\n       if( err instanceof AxiosError){\r\n          if(err?.status===422){\r\n\r\n            const errorsObj:errorsType = {};\r\n\r\n            err?.response?.data?.errors?.forEach((error:errorsType)=>{\r\n\r\n                if( error[\"email\"]!==undefined){\r\n                    errorsObj.email = error[\"email\"];\r\n                }\r\n                if( error[\"password\"]!==undefined){\r\n                    errorsObj.password = error[\"password\"];\r\n                }\r\n\r\n            })\r\n\r\n            return { \r\n                success:false,\r\n                message:\"validation Error\",\r\n                errors: errorsObj\r\n            }\r\n          }\r\n       }\r\n\r\n       return{ \r\n        success:false,\r\n        message:\"Something went wrong\", \r\n        errors:{}\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;IA0Ba;IA2DA","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/login/LoginForm.tsx"],"sourcesContent":["\"use client\";\r\nimport { initialRespType, loginAction } from \"@/actions/authActions\";\r\nimport Link from \"next/link\";\r\nimport { useActionState, useEffect, useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\n\r\nexport default function LoginForm() {\r\n\r\n    const initialState:initialRespType = {\r\n            success:false,\r\n            message:\"\",\r\n            errors:{}\r\n    }\r\n\r\n    const [ state, formAction] = useActionState( loginAction, initialState);\r\n\r\n\r\n    const [ onTypeRemoveErrorReRender, setOnTypeRemoveErrorReRender] = useState(false);\r\n        \r\n        const onTypeRemoveError = (errorType: \"name\" | \"email\" | \"password\" | \"confirm_password\")=>{\r\n    \r\n        if( state?.errors && state?.errors[errorType]!==undefined && state.errors[errorType]!==\"\"){ \r\n            state.errors[errorType] = \"\" ; \r\n            setOnTypeRemoveErrorReRender(!onTypeRemoveErrorReRender);\r\n        }\r\n    \r\n    \r\n    }\r\n    \r\n    \r\n    //render when user type on input which have validation type error message on action of onTypeRemoveError()\r\n    useEffect(()=>{\r\n\r\n        if(state.message!==\"\"){\r\n            toast(\"I AM IRONMAN\");\r\n        }\r\n        \r\n    \r\n    },[onTypeRemoveErrorReRender]);\r\n\r\n    return (\r\n        <>\r\n            <form \r\n                noValidate\r\n                className=\"bg-white p-8 rounded shadow-md w-96\"\r\n                action={formAction}\r\n            >\r\n\r\n                <h1 className=\"text-2xl font-bold text-pink-500 text-center mb-6\">Login</h1>\r\n                <div className=\"mb-4\">\r\n                    <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n                    <input onChange={()=>{onTypeRemoveError(\"email\")}} type=\"email\" name='email' id=\"email\" className=\"mt-1 block w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-blue-500\" />\r\n                    { state?.errors && state?.errors?.email && <div className='text-red-400 text-sm tracking-wide pl-1'>{state?.errors?.email}</div>}\r\n                </div>\r\n\r\n                <div className=\"mb-1\">\r\n                    <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">Password</label>\r\n                    <input onChange={()=>{onTypeRemoveError(\"password\")}} type=\"password\" name='password' id=\"password\" className=\"mt-1 block w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-blue-500\" />\r\n                    { state?.errors && state?.errors?.password && <div className='text-red-400 text-sm tracking-wide pl-1'>{state?.errors?.password}</div>}\r\n                </div>\r\n\r\n                <p className=\"mt-0 ml-1 mb-4\">\r\n                    <Link href=\"/register\" className=\"text-gray-500 underline hover:text-pink-500  text-sm\">Forgot Password</Link>\r\n                </p>\r\n\r\n                <button type=\"submit\" className=\"w-full bg-pink-500 text-white p-2 rounded hover:bg-pink-600 transition duration-200\">Login</button>\r\n\r\n                <p className=\"mt-4 text-center\">\r\n                    Don't have an account? <Link href=\"/register\" className=\"text-blue-500 hover:underline\">Register</Link>\r\n                </p>\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAJA;;;;;;AAMe,SAAS;IAEpB,MAAM,eAA+B;QAC7B,SAAQ;QACR,SAAQ;QACR,QAAO,CAAC;IAChB;IAEA,MAAM,CAAE,OAAO,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,iBAAc,AAAD,EAAG,8HAAA,CAAA,cAAW,EAAE;IAG1D,MAAM,CAAE,2BAA2B,6BAA6B,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAExE,MAAM,oBAAoB,CAAC;QAE3B,IAAI,OAAO,UAAU,OAAO,MAAM,CAAC,UAAU,KAAG,aAAa,MAAM,MAAM,CAAC,UAAU,KAAG,IAAG;YACtF,MAAM,MAAM,CAAC,UAAU,GAAG;YAC1B,6BAA6B,CAAC;QAClC;IAGJ;IAGA,0GAA0G;IAC1G,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QAEN,IAAG,MAAM,OAAO,KAAG,IAAG;YAClB,CAAA,GAAA,wIAAA,CAAA,QAAK,AAAD,EAAE;QACV;IAGJ,GAAE;QAAC;KAA0B;IAE7B,qBACI;kBACI,cAAA,8OAAC;YACG,UAAU;YACV,WAAU;YACV,QAAQ;;8BAGR,8OAAC;oBAAG,WAAU;8BAAoD;;;;;;8BAClE,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAM,SAAQ;4BAAQ,WAAU;sCAA0C;;;;;;sCAC3E,8OAAC;4BAAM,UAAU;gCAAK,kBAAkB;4BAAQ;4BAAG,MAAK;4BAAQ,MAAK;4BAAQ,IAAG;4BAAQ,WAAU;;;;;;wBAChG,OAAO,UAAU,OAAO,QAAQ,uBAAS,8OAAC;4BAAI,WAAU;sCAA2C,OAAO,QAAQ;;;;;;;;;;;;8BAGxH,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAM,SAAQ;4BAAW,WAAU;sCAA0C;;;;;;sCAC9E,8OAAC;4BAAM,UAAU;gCAAK,kBAAkB;4BAAW;4BAAG,MAAK;4BAAW,MAAK;4BAAW,IAAG;4BAAW,WAAU;;;;;;wBAC5G,OAAO,UAAU,OAAO,QAAQ,0BAAY,8OAAC;4BAAI,WAAU;sCAA2C,OAAO,QAAQ;;;;;;;;;;;;8BAG3H,8OAAC;oBAAE,WAAU;8BACT,cAAA,8OAAC,4JAAA,CAAA,UAAI;wBAAC,MAAK;wBAAY,WAAU;kCAAuD;;;;;;;;;;;8BAG5F,8OAAC;oBAAO,MAAK;oBAAS,WAAU;8BAAsF;;;;;;8BAEtH,8OAAC;oBAAE,WAAU;;wBAAmB;sCACL,8OAAC,4JAAA,CAAA,UAAI;4BAAC,MAAK;4BAAY,WAAU;sCAAgC;;;;;;;;;;;;;;;;;;;AAM5G","debugId":null}}]
}