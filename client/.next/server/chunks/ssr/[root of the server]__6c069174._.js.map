{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/login/LoginForm.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/login/LoginForm.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/login/LoginForm.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/components/login/LoginForm.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/login/LoginForm.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/login/LoginForm.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/app/login/page.tsx"],"sourcesContent":["\"use server\"\r\nimport LoginForm from '@/components/login/LoginForm';\r\nimport React from 'react'\r\n\r\nconst Login = () => {\r\n\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\r\n        <LoginForm/>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n"],"names":[],"mappings":";;;;;;AACA;;;;;;AAGA,MAAM,QAAQ;IAEV,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,wIAAA,CAAA,UAAS;;;;;;;;;;AAGlB;uCAEe,uCAAG,GAAH;;;IAAA;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/actions/auth/authActions.tsx"],"sourcesContent":["\"use server\";\r\n\r\nimport axios, { AxiosError } from \"axios\";\r\n\r\nexport type errorsType = {\r\n    name?: string\r\n    email?: string\r\n    password?: string\r\n    confirm_password?: string\r\n}\r\n\r\nexport type dataType = {\r\n    name?: string\r\n    email?: string\r\n    password?: string\r\n    confirm_password?: string\r\n}\r\n\r\n\r\nexport type initialRespType = {\r\n    success:boolean,\r\n    message: string,\r\n    data?: dataType,\r\n    errors :{\r\n        name?: string\r\n        email?: string,\r\n        password?:string \r\n        confirm_password?:string\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const registerAction = async ( prev:initialRespType, formData:FormData ):Promise<initialRespType>=>{\r\n\r\n    try{\r\n        await axios.post(\r\n            `${process.env.BACKEND_API_URL}/user/register`, \r\n            { name: formData.get(\"username\"), email: formData.get(\"email\"), password: formData.get(\"password\"), confirm_password: formData.get(\"confirm-password\") }, \r\n            { headers:{ \"Content-Type\":\"application/json\"}}\r\n        );\r\n\r\n        return{\r\n            success:true,\r\n            message:\"Account Created Successfully, Please check your email and verify your email\",\r\n            errors:{}\r\n        }\r\n       \r\n    }\r\n    catch(err:unknown){\r\n \r\n       if( err instanceof AxiosError){\r\n          if(err?.status===422){\r\n\r\n            const errorsObj:errorsType = {};\r\n\r\n            err?.response?.data?.errors?.forEach((error:errorsType)=>{\r\n\r\n                if( error[\"name\"]!==undefined){\r\n                    errorsObj.name = error[\"name\"];\r\n                }\r\n                else if( error[\"email\"]!==undefined){\r\n                    errorsObj.email = error[\"email\"];\r\n                }\r\n                else if( error[\"password\"]!==undefined){\r\n                    errorsObj.password = error[\"password\"];\r\n                }\r\n                else if( error[\"confirm_password\"]!==undefined){\r\n                    errorsObj.confirm_password = error[\"confirm_password\"];\r\n                }\r\n\r\n            })\r\n\r\n            return { \r\n                success:false,\r\n                message:\"validation Error\",\r\n                errors: errorsObj\r\n            }\r\n          }\r\n       }\r\n\r\n       return{ \r\n        success:false,\r\n        message:\"Something went wrong\", \r\n        errors:{}\r\n        }\r\n    }\r\n\r\n\r\n} \r\n\r\n\r\nexport const loginAction = async ( prev:initialRespType, formData:FormData ):Promise<initialRespType>=>{\r\n\r\n    try{\r\n        await axios.post(\r\n            `${process.env.NEXT_PUBLIC_BACKEND_API_URL}/user/login-check`, \r\n            { email: formData.get(\"email\"), password: formData.get(\"password\") }, \r\n            { headers:{ \"Content-Type\":\"application/json\"}}\r\n        );\r\n\r\n        return{\r\n            success:true,\r\n            message:\"Login Validation Succcess\",\r\n            errors:{},\r\n            data: {\r\n                email: formData.get(\"email\") as string,\r\n                password: formData.get(\"password\") as string\r\n            }\r\n        }\r\n       \r\n    }\r\n    catch(err:unknown){\r\n \r\n       if( err instanceof AxiosError){\r\n          if(err?.status===422){  \r\n\r\n            const errorsObj:errorsType = {};\r\n\r\n            err?.response?.data?.errors?.forEach((error:errorsType)=>{\r\n\r\n                if( error[\"email\"]!==undefined){\r\n                    errorsObj.email = error[\"email\"];\r\n                }\r\n                if( error[\"password\"]!==undefined){\r\n                    errorsObj.password = error[\"password\"];\r\n                }\r\n\r\n            })\r\n\r\n            return { \r\n                success:false,\r\n                message:\"validation Error\",\r\n                errors: errorsObj\r\n            }\r\n          }\r\n       }\r\n\r\n       if( err instanceof AxiosError){\r\n        if(err?.status===401){\r\n\r\n            return{ \r\n                success:true,\r\n                message:\"Invalid Email or Password\",\r\n                errors:{}\r\n            }\r\n          }\r\n        }\r\n     }\r\n\r\n       return{ \r\n        success:false,\r\n        message:\"Something went wrong\", \r\n        errors:{}\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;AAEA;AAAA;;;;;AA+BO,MAAM,uCAAY,GAAZ,iBAAiB,OAAQ,MAAsB;IAExD,IAAG;QACC,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CACZ,GAAG,QAAQ,GAAG,CAAC,eAAe,CAAC,cAAc,CAAC,EAC9C;YAAE,MAAM,SAAS,GAAG,CAAC;YAAa,OAAO,SAAS,GAAG,CAAC;YAAU,UAAU,SAAS,GAAG,CAAC;YAAa,kBAAkB,SAAS,GAAG,CAAC;QAAoB,GACvJ;YAAE,SAAQ;gBAAE,gBAAe;YAAkB;QAAC;QAGlD,OAAM;YACF,SAAQ;YACR,SAAQ;YACR,QAAO,CAAC;QACZ;IAEJ,EACA,OAAM,KAAY;QAEf,IAAI,eAAe,8IAAA,CAAA,aAAU,EAAC;YAC3B,IAAG,KAAK,WAAS,KAAI;gBAEnB,MAAM,YAAuB,CAAC;gBAE9B,KAAK,UAAU,MAAM,QAAQ,QAAQ,CAAC;oBAElC,IAAI,KAAK,CAAC,OAAO,KAAG,WAAU;wBAC1B,UAAU,IAAI,GAAG,KAAK,CAAC,OAAO;oBAClC,OACK,IAAI,KAAK,CAAC,QAAQ,KAAG,WAAU;wBAChC,UAAU,KAAK,GAAG,KAAK,CAAC,QAAQ;oBACpC,OACK,IAAI,KAAK,CAAC,WAAW,KAAG,WAAU;wBACnC,UAAU,QAAQ,GAAG,KAAK,CAAC,WAAW;oBAC1C,OACK,IAAI,KAAK,CAAC,mBAAmB,KAAG,WAAU;wBAC3C,UAAU,gBAAgB,GAAG,KAAK,CAAC,mBAAmB;oBAC1D;gBAEJ;gBAEA,OAAO;oBACH,SAAQ;oBACR,SAAQ;oBACR,QAAQ;gBACZ;YACF;QACH;QAEA,OAAM;YACL,SAAQ;YACR,SAAQ;YACR,QAAO,CAAC;QACR;IACJ;AAGJ;AAGO,MAAM,uCAAS,GAAT,cAAc,OAAQ,MAAsB;IAErD,IAAG;QACC,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CACZ,6DAA2C,iBAAiB,CAAC,EAC7D;YAAE,OAAO,SAAS,GAAG,CAAC;YAAU,UAAU,SAAS,GAAG,CAAC;QAAY,GACnE;YAAE,SAAQ;gBAAE,gBAAe;YAAkB;QAAC;QAGlD,OAAM;YACF,SAAQ;YACR,SAAQ;YACR,QAAO,CAAC;YACR,MAAM;gBACF,OAAO,SAAS,GAAG,CAAC;gBACpB,UAAU,SAAS,GAAG,CAAC;YAC3B;QACJ;IAEJ,EACA,OAAM,KAAY;QAEf,IAAI,eAAe,8IAAA,CAAA,aAAU,EAAC;YAC3B,IAAG,KAAK,WAAS,KAAI;gBAEnB,MAAM,YAAuB,CAAC;gBAE9B,KAAK,UAAU,MAAM,QAAQ,QAAQ,CAAC;oBAElC,IAAI,KAAK,CAAC,QAAQ,KAAG,WAAU;wBAC3B,UAAU,KAAK,GAAG,KAAK,CAAC,QAAQ;oBACpC;oBACA,IAAI,KAAK,CAAC,WAAW,KAAG,WAAU;wBAC9B,UAAU,QAAQ,GAAG,KAAK,CAAC,WAAW;oBAC1C;gBAEJ;gBAEA,OAAO;oBACH,SAAQ;oBACR,SAAQ;oBACR,QAAQ;gBACZ;YACF;QACH;QAEA,IAAI,eAAe,8IAAA,CAAA,aAAU,EAAC;YAC7B,IAAG,KAAK,WAAS,KAAI;gBAEjB,OAAM;oBACF,SAAQ;oBACR,SAAQ;oBACR,QAAO,CAAC;gBACZ;YACF;QACF;IACH;IAEE,OAAM;QACL,SAAQ;QACR,SAAQ;QACR,QAAO,CAAC;IACR;AACJ;;;IA1HS;IA2DA;;AA3DA,+OAAA;AA2DA,+OAAA","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}