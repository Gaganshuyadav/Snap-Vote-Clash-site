{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/app/api/auth/%5B...nextauth%5D/auth.ts"],"sourcesContent":["// import axios from \"axios\";\r\n// import { ISODateString } from \"next-auth\";\r\n// import { JWT } from \"next-auth/jwt\";\r\n// import CredentialsProvider from \"next-auth/providers/credentials\";\r\n// import NextAuth from \"next-auth\";\r\n\r\n// //custom user\r\n// export type CustomUser = {\r\n//     userId?: string | null,\r\n//     name?: string | null,\r\n//     email?: string | null,\r\n//     createdAt?: string | null,\r\n//     updatedAt?: string | null,\r\n//     token?: string | null\r\n\r\n// }\r\n\r\n\r\n// //custom session\r\n// export type CustomSession = {\r\n//     user?: CustomUser,\r\n//     expires?: ISODateString\r\n// }\r\n\r\n\r\n// export const { handlers} =  NextAuth({\r\n//     providers: [\r\n//         CredentialsProvider({\r\n//             name: \"Credentials\",\r\n//             type:\"credentials\",\r\n//             credentials: {\r\n//                 email: { label: \"Email\", type:\"email\", placeholder:\"Enter your email\"},\r\n//                 password: { label:\"Password\", type:\"password\"}\r\n//             },\r\n//             async authorize( credentials, req ){\r\n\r\n//                 console.log(\"credentials:-----------------\",credentials);\r\n//                 if (!credentials || !credentials.email || !credentials.password) {\r\n//                     throw new Error(\"Email and password are required\");\r\n//                 }\r\n\r\n//                 const { data} = await axios.post(\r\n//                     `${process.env.BACKEND_API_URL}/user/login`,\r\n//                     credentials,\r\n//                     { headers:{ \"Content-Type\":\"application/json\"}}\r\n//                 )\r\n\r\n//                 console.log(\":::::::::::\",data);\r\n//                 return data as CustomUser;\r\n//             }\r\n//         })\r\n\r\n//     ],\r\n//     pages: {\r\n//         signIn: \"/login\"\r\n//     },\r\n//     callbacks: {\r\n//         async jwt({ token, user}:{ token:JWT, user:CustomUser}){\r\n//               // Persist the OAuth access_token to the token after signin\r\n//             if(user){\r\n//                 token.user = user;\r\n//             }\r\n\r\n//             return token;\r\n//         },\r\n//         async session({ user, token, session}:{ user:CustomUser, token: JWT, session: CustomSession}){\r\n//             session.user = token.user as CustomUser;\r\n//             return session;\r\n//         }\r\n//     }\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport axios from \"axios\";\r\n\r\n// Custom user type\r\nexport type CustomUser = {\r\n    userId?: string | null;\r\n    name?: string | null;\r\n    email?: string | null;\r\n    createdAt?: string | null;\r\n    updatedAt?: string | null;\r\n    token?: string | null;\r\n};\r\n\r\n// Custom session type\r\nexport type CustomSession = {\r\n    user?: CustomUser;\r\n    expires?: string;\r\n};\r\n\r\n// NextAuth configuration\r\nconst authOptions = {\r\n    providers: [\r\n        CredentialsProvider({\r\n            name: \"Credentials\",\r\n            credentials: {\r\n                email: { label: \"Email\", type: \"email\", placeholder: \"Enter your email\" },\r\n                password: { label: \"Password\", type: \"password\" },\r\n            },\r\n            async authorize(credentials) {\r\n                if (!credentials || !credentials.email || !credentials.password) {\r\n                    throw new Error(\"Email and password are required\");\r\n                }\r\n\r\n                try {\r\n                    const { data } = await axios.post(\r\n                        `${process.env.BACKEND_API_URL}/user/login`,\r\n                        credentials,\r\n                        { headers: { \"Content-Type\": \"application/json\" } }\r\n                    );\r\n\r\n                    if (!data || !data.token || !data.email) {\r\n                        throw new Error(\"Invalid response from the server\");\r\n                    }\r\n\r\n                    return data as CustomUser;\r\n                } catch (error) {\r\n                    console.error(\"Login failed:\", error);\r\n                    throw new Error(\"Invalid email or password\");\r\n                }\r\n            },\r\n        }),\r\n    ],\r\n    pages: {\r\n        signIn: \"/login\",\r\n    },\r\n    callbacks: {\r\n        async jwt({ token, user }) {\r\n            if (user) {\r\n                token.user = user;\r\n            }\r\n            return token;\r\n        },\r\n        async session({ session, token }) {\r\n            session.user = token.user as CustomUser;\r\n            return session;\r\n        },\r\n    },\r\n};\r\n\r\nexport const handlers = NextAuth(authOptions);"],"names":[],"mappings":"AAAA,6BAA6B;AAC7B,6CAA6C;AAC7C,uCAAuC;AACvC,qEAAqE;AACrE,oCAAoC;AAEpC,gBAAgB;AAChB,6BAA6B;AAC7B,8BAA8B;AAC9B,4BAA4B;AAC5B,6BAA6B;AAC7B,iCAAiC;AACjC,iCAAiC;AACjC,4BAA4B;AAE5B,IAAI;AAGJ,mBAAmB;AACnB,gCAAgC;AAChC,yBAAyB;AACzB,8BAA8B;AAC9B,IAAI;AAGJ,yCAAyC;AACzC,mBAAmB;AACnB,gCAAgC;AAChC,mCAAmC;AACnC,kCAAkC;AAClC,6BAA6B;AAC7B,0FAA0F;AAC1F,iEAAiE;AACjE,iBAAiB;AACjB,mDAAmD;AAEnD,4EAA4E;AAC5E,qFAAqF;AACrF,0EAA0E;AAC1E,oBAAoB;AAEpB,oDAAoD;AACpD,mEAAmE;AACnE,mCAAmC;AACnC,sEAAsE;AACtE,oBAAoB;AAEpB,mDAAmD;AACnD,6CAA6C;AAC7C,gBAAgB;AAChB,aAAa;AAEb,SAAS;AACT,eAAe;AACf,2BAA2B;AAC3B,SAAS;AACT,mBAAmB;AACnB,mEAAmE;AACnE,4EAA4E;AAC5E,wBAAwB;AACxB,qCAAqC;AACrC,gBAAgB;AAEhB,4BAA4B;AAC5B,aAAa;AACb,yGAAyG;AACzG,uDAAuD;AACvD,8BAA8B;AAC9B,YAAY;AACZ,QAAQ;AACR,KAAK;;;;AAuBL;AACA;AACA;;;;AAkBA,yBAAyB;AACzB,MAAM,cAAc;IAChB,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,aAAa;gBACT,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAS,aAAa;gBAAmB;gBACxE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YACpD;YACA,MAAM,WAAU,WAAW;gBACvB,IAAI,CAAC,eAAe,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,QAAQ,EAAE;oBAC7D,MAAM,IAAI,MAAM;gBACpB;gBAEA,IAAI;oBACA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAC7B,GAAG,QAAQ,GAAG,CAAC,eAAe,CAAC,WAAW,CAAC,EAC3C,aACA;wBAAE,SAAS;4BAAE,gBAAgB;wBAAmB;oBAAE;oBAGtD,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,EAAE;wBACrC,MAAM,IAAI,MAAM;oBACpB;oBAEA,OAAO;gBACX,EAAE,OAAO,OAAO;oBACZ,QAAQ,KAAK,CAAC,iBAAiB;oBAC/B,MAAM,IAAI,MAAM;gBACpB;YACJ;QACJ;KACH;IACD,OAAO;QACH,QAAQ;IACZ;IACA,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACrB,IAAI,MAAM;gBACN,MAAM,IAAI,GAAG;YACjB;YACA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC5B,QAAQ,IAAI,GAAG,MAAM,IAAI;YACzB,OAAO;QACX;IACJ;AACJ;AAEO,MAAM,WAAW,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file://C%3A/vsCodeFolder/1.webDevelopment/1.WebProjects/3.Snap-Vote/client/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { handlers} from \"./auth\";\r\n\r\nexport const { GET, POST} = handlers ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAC,GAAG,yJAAA,CAAA,WAAQ","debugId":null}}]
}